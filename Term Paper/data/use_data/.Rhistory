write_path <- paste0(data_path, "/state_industry.csv")
write.csv(state_industry.data, write_path, row.names = F)
#We are keeping only 3-digit industry classification
industries.exclude <- c('...', '61,62', '71', '71,72', '711-712', '11,21', '33-34', '521-522', '52,53', '532-533',
'5412-5414, 5416-5419', '54, 55, 56', '54',
1, 2, 3, 6, 10, 11, 12, 21, 22, 34, 35, 36, 45, 51, 56, 59, 60, 61,
62, 63, 64, 65, 68, 69, 70, 75, 76, 79, 82, 84, 85, 86, 87, 88, 89,
91, 92, 100, 101, 102, 103)
industries.include <- c(4, 5, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 27, 28, 29,
30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52,
53, 54, 55, 57, 58, 66, 67, 71, 72, 73, 74, 77, 78, 80, 81)
bea.gdp.industries %>%
filter(industry_line == 1) %>%
select(state, year, all_industries = gdp) %>%
left_join(bea.gdp.industries, by = c("state", "year")) %>%
mutate(state = R.oo::trim(state),
industry = R.oo::trim(industry)) %>%
mutate(industry_share = as.numeric(gdp) / as.numeric(all_industries) * 100) -> bea.gdp.industry.share
included.industry_lines <- c(4, 7, 8, 9, 14, 29, 30, 31, 32, 33, 15, 16, 17, 18, 19, 20, 23, 24, 37, 38, 39, 40, 41, 42,
44, 46, 47, 53, 54, 55, 57, 66, 67, 71, 72, 73, 74, 78, 80, 81)
bea.gdp.industry.share %>%
mutate(year = as.integer(year)) %>%
group_by(state, industry, year) %>%
filter(year == 2017) %>%
top_n(6, wt = industry_share) %>%
mutate(max_year = max(year)) %>%
#mutate(industry_code = factor(naics_code, levels = c("111-112", "325", "212", "324", "531","562", "621", "624"))) %>%
filter(state != "United States") %>%
filter(industry_line %in% included.industry_lines) %>%
na.omit() -> figure5.data
#Figure 2 - GDP Share of Industry
figure_2 <- bea.gdp.industry.share %>%
select(state, year, industry_line, naics_code, industry, industry_share)
write_path <- paste0(data_path, "/", "figure_2.csv")
write.csv(figure_2, write_path, row.names = F)
#-----------------------------------------Restrictions for Health Industries--------------------------------#
health_list <- c("621", "622", "623")
state_health.data <- state_industry.data %>%
group_by(state, year) %>%
filter(year == 2020, state != "United States", industry_code == 621) %>%
ungroup() %>%
group_by(series, year, industry_code)
write_path <- paste0(data_path, "/state_health.csv")
write.csv(state_health.data, write_path, row.names = F)
#-----------------------------------------Aggregate State Restrictions-----------------------------------------#
#Total state restrictions and per capita
state.restrictions.total <- get_values(jurisdiction = state_list, time = 2020, series = 1, industry = 0, documentType = 1) %>%
select(state = jurisdiction.jurisdictionName,
year = valuePeriod.periodCode,
series = series.seriesName,
restrictions = seriesValue) %>%
group_by(state) %>%
merge(pop.state.all, by=c("state", "year")) %>%
mutate(restrictions_pc = population / restrictions)
#Health Restrictions
state.restrictions.health <- get_values(jurisdiction = state_list,
series = 27, time = 2020, documentType = 1) %>%
select(state = jurisdiction.jurisdictionName,
year = valuePeriod.periodCode,
series = series.seriesName,
restrictions = seriesValue) %>%
group_by(state) %>%
merge(pop.state.all, by=c("state", "year")) %>%
mutate(restrictions_pc = population / restrictions)
#Figure 1 - Total Restrictions and Health Restrictions
figure_1 <- rbind(state.restrictions.total, state.restrictions.health) %>%
select(state, year, series, restrictions)
write_path <- paste0(data_path, "/figure_1.csv")
write.csv(figure_1, write_path, row.names = F)
#Figure 3 - Health restrictions per capita
figure_3 <- state.restrictions.health %>%
select(state, year, series, restrictions_pc)
write_path <- paste0(data_path, "/figure_3.csv")
write.csv(figure_3, write_path, row.names = F)
#Figure 4 - Health Restrictions Share
figure_4 <- state.restrictions.health %>%
select(state, year, series, health_restrictions = restrictions) %>%
merge(state.restrictions.total, by=c("state", "year")) %>%
mutate(health_prop = health_restrictions / restrictions) %>%
select(state, year, health_prop)
write_path <- paste0(data_path, "/figure_4.csv")
write.csv(figure_4, write_path, row.names = F)
state_shentropy <- get_values(jurisdiction = state_list,
time = 2020,
series = 52,
documentType = 1) %>%
select(state = jurisdiction.jurisdictionName,
year = valuePeriod.periodCode,
series = series.seriesName,
Shannon_Entropy = seriesValue)
write_path <- paste0(data_path, "/shannon_entropy.csv")
write.csv(state_shentropy, write_path, row.names = F)
View(state_shentropy)
View(state_health.data)
state_documents <- data.frame()
for(x in jurisdiction.list$jurisdictionID){
state_documents <-  rbind(state_documents, get_documents(jurisdiction = x,document_type = 1))
}
# Topic: Regional Health Care Regulatory Snapshot
# Created by: Luke Ashton
# Created on: 4/8/2021
# Version 1
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer, plyr)
options(scipen = 9)
bea_key <- "7C024359-DF54-4781-B26D-A81D54A2A9C9"
`%!in%` <- Negate(`%in%`)
#----------------------------------States for the analysis-------------------------------------------------------------#
state_list <- c("Alabama", "Florida", "Georgia", "Kentucky", "Louisiana", "Mississippi", "North Carolina",
"South Carolina", "Tennessee", "Virginia", "West Virginia")
region <- "Southeast"
region_name <- "Southeast Average"
region_total <- "Southeast"
dir.create(paste0("C:/Users/lukea/Documents/GitHub/regtional-healthregs-stanpshot/Data/", region))
figures_path <- paste0("C:/Users/lukea/Documents/GitHub/regtional-healthregs-stanpshot/Figures/", region)
data_path <- paste0("C:/Users/lukea/Documents/GitHub/regtional-healthregs-stanpshot/Data/", region)
dir.create(paste0("C:/Users/lukea/Documents/GitHub/regtional-healthregs-stanpshot/Figures/", region))
states_list_ids <- get_jurisdictions() %>%
filter(jurisdictionName %in% state_list) %>%
select(jurisdictionID)
document.list <- get_document_types(38)
series.list <- get_series()
agency.list <- get_agencies(25)
topics.list <- get_topics(topic=NA)
jurisdiction.list <- get_jurisdictions() %>%
filter(country == "United States")
state_documents <- data.frame()
for(x in jurisdiction.list$jurisdictionID){
state_documents <-  rbind(state_documents, get_documents(jurisdiction = x,document_type = 1))
}
jurisdiction.list <- get_jurisdictions(state_list) %>%
filter(country == "United States")
jurisdiction.list <- get_jurisdictions(state_list)
jurisdiction.list <- get_jurisdictions() %>%
filter(country == "United States")
View(state_documents)
write_path <- paste0(doc_data_path, "/state_documents.csv")
write.csv(state_documents, write_path, row.name = F)
dir.create(paste0("C:/Users/lukea/Documents/GitHub/regtional-healthregs-stanpshot/Data/doc_level/", region))
doc_data_path <- paste0("C:/Users/lukea/Documents/GitHub/regtional-healthregs-stanpshot/Data/doc_level/", region)
write_path <- paste0(doc_data_path, "/state_documents.csv")
write.csv(state_documents, write_path, row.name = F)
install.packages("~/R/win-library/4.0/regcensusAPI_0.1.2.3.tar.gz", repos = NULL, type = "source")
install.packages("~/R/win-library/4.0/regcensusAPI_0.1.2.3.tar.gz", depedencies=TRUE)
install.packages(Rtools)
e # Title     : TODO
# Objective : TODO
# Created by: Kofi Ewudzi
# Created on: 3/12/2020
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
options(scipen = 19)
bea_key <- "7C024359-DF54-4781-B26D-A81D54A2A9C9"
`%!in%` <- Negate(`%in%`)
`%not_in%` <- Negate(`%in%`)
install.packages("C:\Users\lukea\Documents\R\win-library\4.0", dependencies=TRUE)
install.packages("~R\win-library\4.0", dependencies=TRUE)
e # Title     : TODO
# Objective : TODO
# Created by: Kofi Ewudzi
# Created on: 3/12/2020
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
options(scipen = 19)
bea_key <- "7C024359-DF54-4781-B26D-A81D54A2A9C9"
`%!in%` <- Negate(`%in%`)
`%not_in%` <- Negate(`%in%`)
install.packages(regcensusAPI, dependencies=TRUE)
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
.libPaths()
.libPaths(C:/Program Files/R/R-4.0.2/library)
.libPaths("C:/Program Files/R/R-4.0.2/library")
.libPaths()
.libPaths("C:/Program Files/R/R-4.0.2/library")
e # Title     : TODO
# Objective : TODO
# Created by: Kofi Ewudzi
# Created on: 3/12/2020
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
install.packages("devtools", dependencies = TRUE)
library(devtools)
e # Title     : TODO
# Objective : TODO
# Created by: Kofi Ewudzi
# Created on: 3/12/2020
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
options(scipen = 19)
bea_key <- "7C024359-DF54-4781-B26D-A81D54A2A9C9"
`%!in%` <- Negate(`%in%`)
`%not_in%` <- Negate(`%in%`)
library(devtools)
devtools::install_github("duckmayr/oldr")
e # Title     : TODO
# Objective : TODO
# Created by: Kofi Ewudzi
# Created on: 3/12/2020
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
options(scipen = 19)
bea_key <- "7C024359-DF54-4781-B26D-A81D54A2A9C9"
`%!in%` <- Negate(`%in%`)
`%not_in%` <- Negate(`%in%`)
e # Title     : TODO
# Objective : TODO
# Created by: Kofi Ewudzi
# Created on: 3/12/2020
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
options(scipen = 19)
bea_key <- "7C024359-DF54-4781-B26D-A81D54A2A9C9"
`%!in%` <- Negate(`%in%`)
`%not_in%` <- Negate(`%in%`)
install.packages(regcensusAPI)
install.packages("regcensusAPI")
install.packages("C:\Users\lukea\Documents\R\win-library\4.0\regcensusAPI", dep=TRUE)
install.packages("C:/Users/lukea/Documents/R/win-library/4.0/regcensusAPI", dep=TRUE)
install.packages("C:/Users/lukea/Documents/R/win-library/4.0/regcensusAPI", dependencies = TRUE)
install.packages("C:/Users/lukea/Documents/R/win-library/4.0/regcensusAPI", dependencies = TRUE)
install.packages("C:/Users/lukea/Documents/R/win-library/4.0/regcensusAPI", dependencies = TRUE)
install.packages("C:/Users/lukea/Documents/R/win-library/4.0/regcensusAPI", dependencies = TRUE)
install.packages("C:/Users/lukea/Documents/R/win-library/4.0/regcensusAPI_0.1.2.3.tar", dependencies = TRUE)
remove.packages("regcensusAPITest", lib="~/R/win-library/4.0")
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, viridis, ggthemes, bea.R, flextable, officer)
options(scipen = 19)
bea_key <- "7C024359-DF54-4781-B26D-A81D54A2A9C9"
`%!in%` <- Negate(`%in%`)
`%not_in%` <- Negate(`%in%`)
#----------------------------------States for the analysis-------------------------------------------------------------#
bea_regions <- read.csv("us_bea_regions.csv")
# Topic: Regulatory Accumulation and Poverty/Income Inequality
# Created by: Luke Ashton
# Created on: 11/14/2021
# Version 1
pacman::p_load(tidyverse, regcensusAPI, hrbrthemes, plyr)
prov_list <- c("Alberta", "British Columbia", "Manitoba", "New Brunswick",
"Newfoundland and Labrador", "Nova Scotia", "Ontario", "Prince Edward Island",
"Quebec", "Saskatchewan")
#data paths
dir.create("C:/Users/lukea/Desktop/GMU/Fall 2021/Economics of Regulation/Term Paper/use_data")
data_loc <- ("C:/Users/lukea/Desktop/GMU/Fall 2021/Economics of Regulation/Term Paper/use_data")
data_out <- ("C:/Users/lukea/Desktop/GMU/Fall 2021/Economics of Regulation/Term Paper/data_output")
#bring in RegData summary
prov_list_ids <- get_jurisdictions() %>%
filter(jurisdictionName %in% prov_list) %>%
select(jurisdictionID)
series.list <- get_series()
agency.list <- get_agencies()
topics.list <- get_topics(topic=NA)
jurisdiction.list <- get_jurisdictions() %>%
filter(country == "Canada")
#bring industry data
rgdata.industries.list <- get_industries(33) %>%
filter(nchar(industryCode) == 3) %>%
select(industry_code = industryCode,
industry_name = industryName)
prov.reg.industry <- get_values(jurisdiction = prov_list, industry = rgdata.industries.list$industry_code,
series = 28, time = 1997:2015, documentType = 1)
prov.reg.industry <- get_values(jurisdiction = prov_list, industry = rgdata.industries.list$industry_code,
series = 28, time = 2015, documentType = 1)
prov.reg.industry <- get_values(jurisdiction = prov_list, industry = rgdata.industries.list$industry_code,
series = 28, time = 2015, documentType = 1) %>%
left_join(rgdata.industries.list, by = c("industry_code" = "industry_code"))
View(series.list)
prov.reg.industry <- get_values(jurisdiction = prov_list, industry = rgdata.industries.list$industry_code,
series = 1, time = 2015, documentType = 1)
document_list <- get_document_types()
View(document_list)
View(rgdata.industries.list)
prov.reg.industry <- get_values(jurisdiction = prov_list, industry = rgdata.industries.list$industry_code,
series = 1, time = 2020, documentType = 1)
prov.reg.industry <- get_values(jurisdiction = prov_list, industry = rgdata.industries.list$industry_code,
series = 1, time = 2020, documentType = 2)
rgdata.industries.list <- get_industries(33) %>%
filter(nchar(industryCode) == 2) %>%
select(industry_code = industryCode,
industry_name = industryName)
rgdata.industries.list <- get_industries(33) %>%
filter(nchar(industryCode) == 3) %>%
select(industry_code = industryCode,
industry_name = industryName)
View(document_list)
rgdata.summ <- get_values(jurisdiction = jurisdiction.list, series = 1, time = 1997:2015, documentType = 1)
rgdata.summ <- get_values(jurisdiction = jurisdiction.list, series = 1, time = 2015, documentType = 1)
rgdata.summ <- get_values(jurisdiction = 4, series = 1, time = 2015, documentType = 1)
rgdata.summ <- get_values(jurisdiction = 4, series = 1, time = 2015, documentType = 1, national = FALSE,
date_is_range = FALSE, filtered = TRUE)
rgdata.summ <- get_values(jurisdiction = 4, series = 1, time = 2015, documentType = 1, national = FALSE)
rgdata.summ <- get_values(jurisdiction = 4, series = 1, time = 2015, documentType = 1)
rgdata.summ <- get_values(jurisdiction = 33, series = 1, time = 2015, documentType = 1)
rgdata.summ <- get_values(date_is_range = TRUE, documentType = 1, filtered = TRUE,
jurisdiction = 33, series = 1, time = 2015)
##########################################################################################
#Author: Luke Ashton
#Github_Tag: Scotsman143
#Date: November 23, 2021
#Last_Updated: November 24, 2021
#Github_Repo: https://github.com/Scotsman143/BC_Project
##########################################################################################
library(plyr)
library(reshape2)
library(ggplot2)
#library(Synth)
#library(gsynth)
#library(panelView)
library(glmnet)
#library(quadprog)
##########################################################################################
# Set working directory and import data
##########################################################################################
datadir <- "C:/Users/lukea/Documents/GitHub/BC_Project/Term Paper/data/use_data"
setwd(datadir)
##########################################################################################
# Unemployment
##########################################################################################
# bring in unemployment data
Unemploy.Data <- read.csv("unemploy.csv", stringsAsFactors=F)
# create province name variable for 10 provinces and 3 territories (59 is BC)
Unemploy.Data$prov.abbrev <- "BC"
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 10, "NL", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 11, "PE", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 12, "NS", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 13, "NB", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 24, "QC", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 35, "ON", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 46, "MB", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 47, "SK", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 48, "AB", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 59, "BC", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 60, "YT", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 61, "NT", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 62, "NU", Unemploy.Data$prov.abbrev)
# dummmy and interaction variables
Unemploy.Data$treated_year = ifelse(Unemploy.Data$Reference.period >=2001 & Unemploy.Data$Reference.period <=2008, 1, 0)
Unemploy.Data$treated_prov = ifelse(Unemploy.Data$prov.abbrev == "BC", 1, 0)
Unemploy.Data$interaction = Unemploy.Data$treated_year * Unemploy.Data$treated_prov
Unemploy.Data.Slim <- subset(Unemploy.Data, Unemploy.Data$geo_code == 24)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, Unemploy.Data$geo_code == c(24, 35))
Unemploy.Data.Slim <- subset(Unemploy.Data, Unemploy.Data$geo_code == 24)
Unemploy.Data.Slim <- Unemploy.Data[geo_code == 24]
Unemploy.Data.Slim <- Unemploy.Data[Unemploy.Data$geo_code == 24]
library(plyr)
library(dyplr)
library(reshape2)
library(ggplot2)
library(glmnet)
install.packages(dyplr)
install.packages("dyplr")
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == 24)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = c(24, 35))
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = xor(24, 35))
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = 24 && 35)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = 24)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == 24)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35))
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == xor(24, 35))
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == 24 | 35)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24 | 35)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24 & 35)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24 && 35)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24 & 35)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24 || 35)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24 | 35)
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24)
Unemploy.Data.Slim <- Unemploy.Data[ which(Unemploy.Data$geo_code == 25)]
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- Unemploy.Data[ which(Unemploy.Data$geo_code == 25), ]
Unemploy.Data.Slim <- subset.data.frame(Unemploy.Data, geo_code == 24)
Unemploy.Data.Slim <- subset.default(Unemploy.Data, geo_code == 24)
Unemploy.Data.Slim <- subset.default(Unemploy.Data, geo_code == 24 && geo_code == 35)
Unemploy.Data.Slim <- subset.default(Unemploy.Data, geo_code == 24)
View(Unemploy.Data)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == 24)
Unemploy.Data.Slim <- subset.default(Unemploy.Data, Unemploy.Data$geo_code == 24)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == 24 && geo_code == 35)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == 24 || geo_code == 35)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == 24)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35))
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35), drop = FALSE)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35, 46, 48, 59), drop = FALSE)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35, 46, 48, 59),
select == c('Reference.period') =  drop = FALSE)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35, 46, 48, 59),
select == c('Reference.period'), drop = FALSE)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35, 46, 48, 59),
select = c('Reference.period'), drop = FALSE)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = c(24, 35, 46, 48, 59),
select = c('Reference.period'), drop = FALSE)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = c(24, 35, 46, 48, 59), drop = FALSE)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = c(24, 35, 46, 48, 59), drop = TRUE)
View(Unemploy.Data.Slim)
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code = c(24, 35, 46, 48, 59))
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code == c(24, 35, 46, 48, 59))
Unemploy.Data.Slim <- subset(Unemploy.Data, geo_code != c(24, 35, 46, 48, 59))
View(Unemploy.Data.Slim)
unemploy_data_2 <- read.csv("unemploy_slim.csv", stringsAsFactors=F)
unemploy_data_2$treated_year = ifelse(unemploy_data_2$Reference.period >=2001  & unemploy_data_2$Reference.period <=2008, 1, 0)
unemploy_data_2$treated_prov = ifelse(unemploy_data_2$geo_code == 59, 1, 0)
unemploy_data_2$interaction = unemploy_data_2$treated_year * unemploy_data_2$treated_prov
# large province did estimator
unemploy_didreg_2 = glm(unemploy_rate ~ treated_prov + treated_year, data = unemploy_data_2)
summary(unemploy_didreg_2)
unemploy_didreg1_2 = glm(unemploy_rate ~ treated_prov*treated_year, data = unemploy_data_2)
summary(unemploy_didreg1_2)
test <- subset(Unemploy.Data, prov.abbrev == 'BC')
View(test)
test <- subset(Unemploy.Data, prov.abbrev == c('BC'))
View(test)
test <- subset(Unemploy.Data, prov.abbrev == c('BC', 'QC'))
View(test)
View(test)
##########################################################################################
#Author: Luke Ashton
#Github_Tag: Scotsman143
#Date: November 23, 2021
#Last_Updated: November 24, 2021
#Github_Repo: https://github.com/Scotsman143/BC_Project
##########################################################################################
library(plyr)
library(reshape2)
library(ggplot2)
library(glmnet)
##########################################################################################
# Set working directory and import data
##########################################################################################
datadir <- "C:/Users/lukea/Documents/GitHub/BC_Project/Term Paper/data/use_data"
setwd(datadir)
##########################################################################################
# Unemployment
##########################################################################################
# bring in unemployment data
Unemploy.Data <- read.csv("unemploy.csv", stringsAsFactors=F)
# create province name variable for 10 provinces and 3 territories (59 is BC)
Unemploy.Data$prov.abbrev <- "BC"
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 10, "NL", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 11, "PE", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 12, "NS", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 13, "NB", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 24, "QC", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 35, "ON", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 46, "MB", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 47, "SK", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 48, "AB", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 59, "BC", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 60, "YT", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 61, "NT", Unemploy.Data$prov.abbrev)
Unemploy.Data$prov.abbrev <- ifelse(Unemploy.Data$geo_code == 62, "NU", Unemploy.Data$prov.abbrev)
# dummmy and interaction variables
Unemploy.Data$treated_year = ifelse(Unemploy.Data$Reference.period >=2001 & Unemploy.Data$Reference.period <=2008, 1, 0)
Unemploy.Data$treated_prov = ifelse(Unemploy.Data$prov.abbrev == "BC", 1, 0)
Unemploy.Data$interaction = Unemploy.Data$treated_year * Unemploy.Data$treated_prov
# did estimator
unemploy_didreg = glm(unemploy_rate ~ treated_prov + treated_year, data = Unemploy.Data)
summary(unemploy_didreg)
unemploy_didreg1 = glm(unemploy_rate ~ treated_prov*treated_year, data = Unemploy.Data)
summary(unemploy_didreg1)
# large province DiD
unemploy_data_2 <- read.csv("unemploy_slim.csv", stringsAsFactors=F)
unemploy_data_2$treated_year = ifelse(unemploy_data_2$Reference.period >=2001  & unemploy_data_2$Reference.period <=2008, 1, 0)
unemploy_data_2$treated_prov = ifelse(unemploy_data_2$geo_code == 59, 1, 0)
unemploy_data_2$interaction = unemploy_data_2$treated_year * unemploy_data_2$treated_prov
# large province did estimator
unemploy_didreg_2 = glm(unemploy_rate ~ treated_prov + treated_year, data = unemploy_data_2)
summary(unemploy_didreg_2)
unemploy_didreg1_2 = glm(unemploy_rate ~ treated_prov*treated_year, data = unemploy_data_2)
summary(unemploy_didreg1_2)
##########################################################################################
# Wages
##########################################################################################
# bring in wage data
Wages.Data <- read.csv("wages.csv", stringsAsFactors=F)
# create province name variable for 10 provinces and 3 territories (59 is BC)
Wages.Data$prov.abbrev <- "BC"
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 10, "NL", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 11, "PE", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 12, "NS", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 13, "NB", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 24, "QC", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 35, "ON", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 46, "MB", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 47, "SK", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 48, "AB", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 59, "BC", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 60, "YT", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 61, "NT", Wages.Data$prov.abbrev)
Wages.Data$prov.abbrev <- ifelse(Wages.Data$geo_code == 62, "NU", Wages.Data$prov.abbrev)
# dummmy and interaction variables
Wages.Data$treated_year = ifelse(Wages.Data$Reference.period >= 2001 & Wages.Data$Reference.period <=2008, 1, 0)
Wages.Data$treated_prov = ifelse(Wages.Data$prov.abbrev == "BC", 1, 0)
Wages.Data$interaction = Wages.Data$treated_year * Wages.Data$treated_prov
# did estimator
wage_didreg = glm(avg_hr_wage ~ treated_prov + treated_year, data = Wages.Data)
summary(wage_didreg)
wage_didreg1 = glm(avg_hr_wage ~ treated_prov*treated_year, data = Wages.Data)
summary(wage_didreg1)
library(sjPlot)
install.packages('sjPlot')
library(plyr)
library(reshape2)
library(ggplot2)
library(glmnet)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
